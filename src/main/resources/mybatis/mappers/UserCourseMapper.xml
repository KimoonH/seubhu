<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="store.seub2hu2.course.mapper.UserCourseMapper">
    <!--
        List<UserBadge> getUserBadge(@Param("userNo") int userNo);
    -->
    <select id="getUserBadge" resultType="store.seub2hu2.course.vo.UserBadge">
        select ub.user_no as "user.no"
             , b.badge_no as "badge.no"
             , b.badge_name as "badge.name"
             , b.badge_description as "badge.description"
             , b.badge_img as "badge.image"
        from USER_BADGES ub inner join BADGES b
        on ub.badge_no = b.badge_no
        where ub.user_no = #{userNo}
        order by b.badge_no
    </select>

    <!--
        UserLevel getUserLevel(@Param("userNo") int userNo);
    -->
    <select id="getUserLevel" resultType="store.seub2hu2.course.vo.UserLevel">
        select u.user_no as "user.no"
            , l.challenge_level as level
        from USERS u inner join COURSE_USER_LEVELS l
        on u.user_no = l.user_no
        where u.user_no = #{userNo}
    </select>

    <!--
        int getTotalRows(@Param("condition") Map<String, Object> condition);
     -->
    <select id="getTotalRows" resultType="int">
        select count(*)
        from COURSE_RECORDS
        where course_no = #{condition.courseNo}
    </select>

    <!--
        User checkSuccess(@Param("userNo") int userNo);
    -->
    <select id="checkSuccess" resultType="store.seub2hu2.course.vo.CourseWhether">
        select w.is_register as isRegister
             , w.is_success as isSuccess
             , w.course_no as "course.no"
             , u.user_no as "user.no"
             , u.user_nickname as "user.nickname"
        from CHALLENGE_WHETHER w inner join USERS u
        on w.user_no = u.user_no
        where u.user_no = #{userNo}
        and w.course_no = #{courseNo}
        and w.is_success = 'Y'
    </select>

    <!--
        CourseLike getCourseLike(@Param("courseNo") int courseNo, @Param("userNo") int userNo);
    -->
    <select id="getCourseLike" resultType="store.seub2hu2.course.vo.CourseLike">
        select course_no as "course.no"
             , user_no as "user.no"
        from COURSE_LIKES
        where course_no = #{courseNo}
        and user_no = #{userNo}
    </select>

    <!--
        void updateLikeCount(@Param("courseNo") int courseNo);
    -->
    <update id="updateLikeCount">
        update COURSES
        set course_like_cnt = #{likeCount}
        where course_no = #{courseNo}
    </update>

    <!--
        void insertLikeUser(@Param("userNo") int userNo, @Param("courseNo") int courseNo);
    -->
    <insert id="insertLikeUser">
        insert into COURSE_LIKES
            (course_no
            , user_no)
        values
            (#{courseNo}
            , #{userNo})
    </insert>

    <!--
        void deleteLikeUser(@Param("userNo") int userNo, @Param("courseNo") int courseNo);
    -->
    <delete id="deleteLikeUser">
        delete from COURSE_LIKES
        where user_no = #{userNo}
        and course_no = #{courseNo}
    </delete>

    <!--
        List<Records> getRecords(@Param("condition") Map<String, Object> condition);
    -->
    <select id="getRecords" resultType="store.seub2hu2.course.vo.Records">
        select *
        from (
              select dense_rank() over (order by r.finished_time) as no
                    , row_number() over (order by r.finished_time) as rn
                   , r.finished_no
                   , r.finished_date as finishedDate
                   , r.finished_time as finishedTime
                   , r.course_no as "course.no"
                   , u.user_no as "user.no"
                   , u.user_nickname as "user.nickname"
              from COURSE_RECORDS r inner join USERS u
              on r.user_no = u.user_no
              where course_no = #{condition.courseNo}
              <if test="condition.userNo != null">
                  and r.user_no = #{condition.userNo}
              </if>
             ) ar
        <if test="condition.userNo == null">
            where rn between #{condition.begin} and #{condition.end}
        </if>
    </select>
</mapper>